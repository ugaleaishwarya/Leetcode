4.Median of Two Sorted Arrays
( https://leetcode.com/problems/median-of-two-sorted-arrays/description/?envType=problem-list-v2&envId=array )

Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 
//------------------------------------------------------------------------------------------------------------------------


      //Code:


               import java.util.Arrays;

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;

        
        int[] merged = new int[n + m];
        int k = 0;
        for (int i = 0; i < n; i++) {
            merged[k++] = nums1[i];
        }
        for (int i = 0; i < m; i++) {
            merged[k++] = nums2[i];
        }

       
        Arrays.sort(merged);

        
        int total = merged.length;
        if (total % 2 == 1) {
            
            return (double) merged[total / 2];
        } else {
            
            int middle1 = merged[total / 2 - 1];
            int middle2 = merged[total / 2];
            return (middle1 + middle2) / 2.0;
        }
    }
}


//------------------------------------------------------------------------------------------------------

          //Explaination

              The code is a solution to find the median of two sorted arrays (nums1 and nums2).

Median: The median of an array is:

The middle value if the number of elements is odd.
The average of the two middle values if the number of elements is even.
Code Breakdown:
Initialization:


int n = nums1.length;
int m = nums2.length;
Variables n and m store the lengths of arrays nums1 and nums2, respectively.
Merging the Arrays:


int[] merged = new int[n + m];
int k = 0;
for (int i = 0; i < n; i++) {
    merged[k++] = nums1[i];
}
for (int i = 0; i < m; i++) {
    merged[k++] = nums2[i];
}
A new array merged is created to hold all elements from nums1 and nums2.
The elements of nums1 are added to merged using a loop.
The elements of nums2 are also added to merged in a similar way.
The variable k keeps track of the index for the merged array while appending elements.
Sorting the Merged Array:


Arrays.sort(merged);
The combined merged array is sorted to bring all elements into order.
Why sort? The problem requires finding the median of a sorted array. Even though nums1 and nums2 are sorted individually, merging them may disrupt the order, so sorting ensures proper arrangement.
Median Calculation:


int total = merged.length;
total stores the total number of elements in the merged array.
Case 1: Odd Number of Elements

if (total % 2 == 1) {
    return (double) merged[total / 2];
}
If the total number of elements is odd (total % 2 == 1), the median is the middle element.
Example: For [1, 3, 8] (3 elements), the median is 3.
Case 2: Even Number of Elements

else {
    int middle1 = merged[total / 2 - 1];
    int middle2 = merged[total / 2];
    return (middle1 + middle2) / 2.0;
}
If the total number of elements is even, the median is the average of the two middle elements.
Example: For [1, 2, 3, 4] (4 elements), the two middle elements are 2 and 3, and the median is (2 + 3) / 2 = 2.5.
How It Works:
Input arrays are combined into a new array, and all elements are arranged in ascending order.
Depending on the total count of elements, the appropriate formula for the median is applied (single middle element or the average of two middle elements).
Example:
Input:
nums1 = [1, 3]
nums2 = [2]
Execution:
Merge and sort: merged = [1, 2, 3]
Total elements: 3 (odd)
Median: Middle element â†’ merged[1] = 2.
Output:
2.0

